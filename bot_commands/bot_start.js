const pool = require("../db/pool");
let users = {};
const botStart = async (ctx) => {
  try {
    const user = ctx.message.from;
    // await createUser(user);
    const checkUserBan = await pool.query(
      `select * from users where tg_id = ${ctx.message.from.id}`
    );

    const userInfo = await pool.query(
      `select * from users_info where user_id = ${ctx.message.from.id}`
    );
    console.log(checkUserBan.rows[0].is_ban);
    if (checkUserBan.rows[0]?.is_ban === 1) {
      await ctx.reply("–í–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ", {
        reply_markup: {
          keyboard: [[{ text: "–í–∏ –±—É–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" }]],
        },
      });
    } else {
      if (userInfo?.rows <= 0) {
        await ctx.replyWithHTML(`–í—ñ—Ç–∞—é!`, {
          reply_markup: {
            keyboard: [
              [{ text: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É üìí" }],
              [
                {
                  text: "üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç",
                  web_app: { url: "https://enjoyhub.space" },
                },
              ],
            ],
            resize_keyboard: true,
          },
        });
      } else {
        await ctx.replyWithHTML(`–í—ñ—Ç–∞—é !`, {
          reply_markup: {
            keyboard: [
              [{ text: "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å" }, { text: "üëÄ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏" }],
              [
                { text: "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" },
                { text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" },
              ],
              [{ text: "üê£ –ó–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º" }],
              [
                {
                  text: "üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç",
                  web_app: { url: "https://enjoyhub.space" },
                },
              ],
            ],
            resize_keyboard: true,
          },
        });
      }
    }

    const userId = ctx.from.id;
    const referrerId = ctx.message.text.split(" ")[1];

    if (referrerId) {
      users[userId] = { referrer: referrerId };
      const existReferalUsers = await pool.query(
        `select * from referrals where referrer_id = ${userId} and referee_id =${referrerId}`
      );

      if (existReferalUsers.rows > 0) {
        console.log("exist");
        return;
      }
      if (existReferalUsers.rows <= 0) {
        const res =
          await pool.query(`insert into referrals (referrer_id,referee_id) 
        values(${userId},${referrerId})
       `);
        await ctx.reply(
          `–í–∞—Å –∑–∞–ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ${referrerId}\n\n–í–∞–º –Ω–∞–¥–∞–Ω–æ 2 –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö ‚ù§Ô∏è\n–ö–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!`
        );
        await bot.telegram.sendMessage(
          referrerId,
          `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} —â–æ–π–Ω–æ –≤–∞–º –Ω–∞–¥–∞–≤ 3 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö ‚ù§Ô∏è\n–ö–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!)`
        );

        const addLikesToSubscriber = await pool.query(`
      UPDATE users
      SET likes_per_day = likes_per_day + 2
      WHERE tg_id = ${userId}`);
        // ctx.sendMessage(referrerId,`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} —â–æ–π–Ω–æ –≤–∞–º –Ω–∞–¥–∞–≤ 2 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –ª–∞–π–∫–∏.–ö–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!)`)

        const addLikesToReferer = await pool.query(`
          UPDATE users
          SET likes_per_day = likes_per_day + 3
          WHERE tg_id = ${referrerId}`);
      }
      users = {};
    } else {
      users[userId] = { referrer: null };
      users = {};
    }
  } catch (error) {
    console.log(error);
    // await ctx.reply('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')
  }
};

module.exports = {
  botStart,
};
