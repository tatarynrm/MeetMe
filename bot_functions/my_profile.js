const { createUser } = require("../controllers/users");
const pool = require("../db/pool");
const moment = require('moment')
const myProfile = async (ctx)=>{
    try {
        const user = ctx.message.from;
  await createUser(user);
  const myAcc = await pool.query(`
  SELECT a.*, b.photo_url,b.type
  FROM users_info AS a
  LEFT JOIN users_photos AS b ON a.user_id = b.user_id
  WHERE a.user_id = ${ctx.message.from.id};
  `);
  const me = myAcc.rows[0];
  const banUser = await pool.query(
    `select * from users where tg_id = ${ctx.message.from.id}`
  );
  if (banUser.rows[0].is_ban === 1) {
    await ctx.reply("–í–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ", {
      reply_markup: {
        keyboard: [[{ text: "–í–∏ –±—É–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" }]],
      },
    });
  } else {
    if (me) {
      await ctx.reply(
        `–¢–∏ ${
          me?.sex === "M" ? "–ø—Ä–∏—î–¥–Ω–∞–≤—Å—è" : "–ø—Ä–∏—î–¥–Ω–∞–ª–∞—Å—å"
        } –¥–æ –Ω–∞—Å\nüìÖ${moment(me?.created_at).format("LLL")} –≥–æ–¥.`
      );
      if (me === undefined || me === null || me.type === null) {
        await ctx.reply(
          "–£–ø—Å—Å—Å.....—â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫....–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start"
        );
      } else {
        const message = `üë§–Ü–º'—è: ${me?.name ? me?.name : "..."}\n\nüïê–í—ñ–∫: ${
          me?.age ? me?.age : 50
        }\n\nüíÅ–Ü–Ω—Ñ–∞: ${me?.text ? me?.text : "–ù–µ–º–∞—î —ñ–Ω—Ñ–∏"}`;
        if (me.photo_url) {
          if (me?.type === "photo") {
            await ctx.replyWithPhoto(
              {
                url: me.photo_url,
              },
              {
                caption: message,
                reply_markup: {
                  keyboard: [
                    [{ text: "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
                    [{ text: "üåü Premium" }, { text: "üíå –ú–æ—ó –≤–ø–æ–¥–æ–±–∞–π–∫–∏" }],
                    [{ text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏" }, { text: "–ó–∞–ª–∏—à–æ–∫ ‚ù§Ô∏è" }],
                    [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
                  ],
                  resize_keyboard: true,
                },
              }
            );
          } else {
            await ctx.replyWithVideo(
              {
                url: me?.photo_url,
              },
              {
                caption: message,
                reply_markup: {
                  keyboard: [
                    [{ text: "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
                    [{ text: "üåü Premium" }, { text: "üíå –ú–æ—ó –≤–ø–æ–¥–æ–±–∞–π–∫–∏" }],
                    [{ text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏" }, { text: "–ó–∞–ª–∏—à–æ–∫ ‚ù§Ô∏è" }],
                    [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
                  ],
                  resize_keyboard: true,
                },
              }
            );
          }
        } else {
          return await ctx.reply("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É", {
            reply_markup: {
              keyboard: [[{ text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" }]],
              resize_keyboard: true,
            },
          });
        }
      }
    } else {
      return await ctx.reply("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É", {
        reply_markup: {
          keyboard: [[{ text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" }]],
          resize_keyboard: true,
        },
      });
    }
  }
    } catch (error) {
        console.log(error);
    }
}


module.exports = myProfile