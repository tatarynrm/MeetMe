require("dotenv").config();
const { Telegraf, Scenes, session, Markup } = require("telegraf");
const bot = new Telegraf(process.env.BOT_TOKEN);
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const http = require("http");
const app = express();
const liqpayRouter = require("./routes/liqpay/liqpay");
const port = 5005;
const path = require("path");
var LiqPay = require("./my_modules/liqpay/liqpay");
const { v4: uuidv4 } = require("uuid");
const pool = require("./db/pool");
const geolib = require("geolib");
const iconv = require("iconv-lite");
const { createUser } = require("./controllers/users");

const registrationScene = require("./scenes/registerScene");
const likesScene = require("./scenes/likesScene");
const { default: axios } = require("axios");
const public_key = "sandbox_i31110430124";
const private_key = "sandbox_HJjraXMdCLnz3ApcEJOYCjmSgRjhsjtuvFSVmVci";
var liqpay = new LiqPay(public_key, private_key);

// stage.register(registrationScene);
app.use(bodyParser.json({ limit: "60mb", extended: true }));
app.use(bodyParser.urlencoded({ limit: "60mb", extended: true }));
app.use(express.json());
app.use("/img", express.static("img"));
app.use("/downloads", express.static("downloads"));
app.use(
  cors({
    origin: "*",
    methods: ["POST", "GET"],
  })
);
app.use("/liqpay", liqpayRouter);

const stage = new Scenes.Stage([registrationScene, likesScene]);

bot.use(session());
bot.use(stage.middleware());
bot.use((ctx, next) => {
  ctx.session.myIndex = 0;
  return next();
});
global.currentProfileIndex = 0;
const getInvoice = async (amount, username, customer) => {
  try {
    const invoice = await liqpay.api(
      "request",
      {
        action: "invoice_send",
        version: "3",
        email: "tatarynrm@gmail.com",
        amount: amount,
        currency: "UAH",
        order_id: uuidv4(),
        description: `–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –±–æ—Ç–∞ –ß–∏—Å—Ç–æ–∫—Ä–æ–≤–Ω–π —É–∫—Ä–∞—ó–Ω–µ—Ü—å ${
          username ? username : '.'
        }`,
        server_url: "https://api.noris.tech/liqpay/callback",
        customer: customer,
        info: "–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏ Telegram Bot",
      },
      function (json) {
        console.log(json.result);
      }
    );
    return invoice;
  } catch (error) {
    console.log(error);
  }
};
const users = {};
bot.start(async (ctx) => {
  createUser(ctx.message.from);

  const userInfo = await pool.query(
    `select * from users_info where user_id = ${ctx.message.from.id}`
  );

  if (userInfo.rows <= 0) {
    ctx.replyWithHTML(
      `–í—ñ—Ç–∞—é –≤ –±–æ—Ç—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤ MeetMe.\n–ü–µ—Ä—à–∏–π –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ç –∑–Ω–∞–π–æ–º—Å—Ç–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ!`,
      {
        reply_markup: {
          keyboard: [
            [{ text: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É üìí" }],
            [{ text: "–ù–∞—à–µ Comunity üë®‚Äçüë®‚Äçüëß‚Äçüëß" }],
          ],
          resize_keyboard: true,
        },
      }
    );
  } else {
    ctx.replyWithHTML(
      `–í—ñ—Ç–∞—é –≤ –±–æ—Ç—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤ MeetMe.\n–ü–µ—Ä—à–∏–π –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ç –∑–Ω–∞–π–æ–º—Å—Ç–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ!`,
      {
        reply_markup: {
          keyboard: [
            [{ text: "üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" }, { text: "üëÄ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏" }],
            [
              { text: "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" },
              { text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" },
            ],
            [{text:"üê£ –ó–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º"}]
          ],
          resize_keyboard: true,
        },
      }
    );
  }
  const userId = ctx.from.id;
  const referrerId = ctx.message.text.split(" ")[1];

  if (referrerId) {
    users[userId] = { referrer: referrerId };
    await ctx.reply(
      `–í–∞—Å –∑–∞–ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ${referrerId}\n\n–í–∞–º –Ω–∞–¥–∞–Ω–æ 2 –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö ‚ù§Ô∏è`
    );
    const existReferalUsers = await pool.query(
      `select * from referals where user_id = ${userId} and referer_id =${referrerId}`
    );
    if (existReferalUsers.rows > 0) {
      console.log("exist");
    }
    if (existReferalUsers.rows <= 0) {
      const res = await pool.query(`insert into referals (user_id,referer_id) 
    values(${userId},${referrerId})
   `);
      // ctx.sendMessage(referrerId,`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} —â–æ–π–Ω–æ –≤–∞–º –Ω–∞–¥–∞–≤ 2 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –ª–∞–π–∫–∏.–ö–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!)`)
      bot.telegram.sendMessage(
        referrerId,
        `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} —â–æ–π–Ω–æ –≤–∞–º –Ω–∞–¥–∞–≤ 5 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö ‚ù§Ô∏è.–ö–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!)`
      );
    }
  } else {
    users[userId] = { referrer: null };
  }
});

bot.hears("–ü—Ä–µ–º—ñ—É–º 1 —Ç–∏–∂–¥–µ–Ω—å", async (ctx) => {
  const res = await getInvoice(
    75,
    ctx.message.from.username,
    ctx.message.from.id
  );

  ctx.reply("–î–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ü—Ä–µ–º—ñ—É–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 1 —Ç–∏–∂–¥–µ–Ω—å", url: res.href }],
      ],
      resize_keyboard: true,
    },
  });
});

bot.hears("distance", (ctx) => {
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ö–∏—ó–≤)
  const pointA = { latitude: 50.4501, longitude: 30.5234 };

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ—ó —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –õ—å–≤—ñ–≤)
  const pointB = { latitude: 49.8383, longitude: 24.0232 };

  // –û–±—á–∏—Å–ª–∏—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const distance = geolib.getDistance(pointA, pointB);
  ctx.reply(
    `–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ç–æ—á–∫–æ—é A —ñ —Ç–æ—á–∫–æ—é B: ${geolib
      .convertDistance(distance, "km")
      .toFixed(1)}–∫–º`
  );
});
let profiles = [];
let currentProfileIndex = 0;
let like = { user: null };
bot.command("dev", (ctx) => ctx.scene.enter("registrationScene"));
bot.hears("üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É", async (ctx) => {
  ctx.scene.enter("registrationScene");
});
bot.hears("–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É üìí", async (ctx) => {
  ctx.scene.enter("registrationScene");
});

bot.hears("üëÄ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏", async (ctx) => {
  const profiles1 = await pool.query(`
 SELECT a.*, b.photo_url,b.type
 FROM users_info AS a
 LEFT JOIN users_photos AS b
 ON a.user_id = b.user_id 
 where a.user_id != ${ctx.message.from.id}
 `);
  const usersProfile = profiles1.rows;
  if (usersProfile.length > 0) {
    profiles.push(...usersProfile);
  }
  if (currentProfileIndex < profiles.length) {
    sendProfile(ctx);
  } else {
    ctx.reply("–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.");
  }
});
async function sendProfile(ctx, like) {
  const currentProfile = profiles[currentProfileIndex];
  const message = `Name: ${currentProfile.name}\nAge: ${currentProfile.age}\nInfo: ${currentProfile.text}`;
  console.log(currentProfile);
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback("Option 1", "option1"),
    Markup.button.callback("Option 2", "option2"),
  ]);

  if (currentProfile.type === "photo") {
    await ctx.replyWithPhoto(
      {
        url: currentProfile.photo_url,
      },
      {
        caption: message,
        reply_markup: {
          keyboard: [[{ text: "‚ù§Ô∏è" }, { text: "üëé" }]],
          resize_keyboard: true,
        },
      }
    );
  } else {
    await ctx.replyWithVideo(
      {
        url: currentProfile.photo_url,
      },
      {
        caption: message,
        reply_markup: {
          keyboard: [[{ text: "‚ù§Ô∏è" }, { text: "üëé" }]],
          resize_keyboard: true,
        },
      }
    );
  }
  // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ currentProfileIndex –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏
  currentProfileIndex++;
}

bot.hears("‚ù§Ô∏è", async (ctx) => {
  const prevUser = profiles[currentProfileIndex - 1];
  // –û–Ω–æ–≤—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏ —è–∫ –ª–∞–π–∫
  const currentProfile = profiles[currentProfileIndex - 1];

  if (!prevUser?.user_id || prevUser.user_id === null) {
    return null;
  } else {
    const res = await pool.query(`
    INSERT INTO users_likes (user_id1, user_id2, like_1, like_2, created_at)
    VALUES (${ctx.message.from.id}, ${prevUser.user_id}, 1, 0, NOW());
     `);
    ctx.telegram.sendMessage(
      prevUser.user_id,
      `–°—Ö–æ–∂–µ –≤–∞–º–∏ —Ö—Ç–æ—Å—å –∑–∞—Ü—ñ–∫–∞–≤–∏–≤—Å—è üòé\n\n\n–ü–æ–¥–∏–≤—ñ—Ç—å—Å—è —Ö—Ç–æ –≤–∞—Å –ª–∞–π–∫–Ω—É–≤ –≤ –º–µ–Ω—é:\n\nüîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç -> üíå –ú–æ—ó –≤–ø–æ–¥–æ–±–∞–π–∫–∏`
    );
  }

  //   –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏
  if (currentProfileIndex < profiles.length) {
    sendProfile(ctx, (like = 1));
  } else {
    ctx.reply("–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É", {
      reply_markup: {
        keyboard: [
          [{ text: "üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" }, { text: "üëÄ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏" }],
          [
            { text: "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" },
            { text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" },
          ],
        ],
        resize_keyboard: true,
      },
    });
  }
});

bot.hears("üëé", async (ctx) => {
  // –û–Ω–æ–≤—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏ —è–∫ –¥–∏–∑–ª–∞–π–∫
  const currentProfile = profiles[currentProfileIndex - 1];
  // await ctx.reply(`You disliked ${currentProfile.name}'s profile.`);

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏
  if (currentProfileIndex < profiles.length) {
    sendProfile(ctx, (like = 0));
  } else {
    ctx.reply("–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É", {
      reply_markup: {
        keyboard: [
          [{ text: "üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" }, { text: "üëÄ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏" }],
          [
            { text: "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" },
            { text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" },
          ],
        ],
        resize_keyboard: true,
      },
    });
  }
});

bot.hears("üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", async (ctx) => {
  const photoPath = path.join(__dirname, "static_files", "referal.jpg");
  await ctx.replyWithPhoto(
    { source: photoPath },
    {
      caption: `\n<b>–í–∞—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</b>\n\n<i>(–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏)</i>\n<code>https://t.me/noris_chat_bot?start=${ctx.message.from.id}</code>\n\n
      üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ü—Ä–æ–≥—Ä–∞–º–∞

–ü–æ–∫–ª–∏–∫–∞–π—Ç–µ —Å–≤–æ—ó—Ö –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞, —è–∫—ñ –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏!

üåê –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –î—Ä—É–∑—ñ–≤: –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–∑—è–º–∏ —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º.

üéÅ –û—Ç—Ä–∏–º—É–π—Ç–µ –í–∏–Ω–∞–≥–æ—Ä–æ–¥—É: –ó–∞ –∫–æ–∂–Ω–æ–≥–æ –¥—Ä—É–≥–∞, —è–∫–∏–π –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –∑–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ—Å–æ–±–ª–∏–≤–∏–π –±–æ–Ω—É—Å.

üöÄ –ó–±—ñ–ª—å—à—É–π—Ç–µ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–¥—è–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –±–æ–Ω—É—Å–∞–º, –≤–∏ —Ä–æ–∑–±–ª–æ–∫—É—î—Ç–µ –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏.

üìà –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ —Ç–∞ –≤–∞—à–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å —É –ø–∞–Ω–µ–ª—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

üí° –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –ë–æ–Ω—É—Å–∏: –ó–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–µ–≤–Ω–∏—Ö –º–∏–ª—å–Ω–∏–∫—ñ–≤, –æ—Ç—Ä–∏–º—É–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.
      \n\n`,
      parse_mode: "HTML",
    }
    // `–í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\nhttps://t.me/noris_chat_bot?start=${ctx.message.from.id}`
  );
});

bot.hears("üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç", async (ctx) => {
  const myAcc = await pool.query(`
  SELECT a.*, b.photo_url,b.type
  FROM users_info AS a
  LEFT JOIN users_photos AS b ON a.user_id = b.user_id
  WHERE a.user_id = ${ctx.message.from.id};
  `);
  const me = myAcc.rows[0];
  console.log(me);
  const message = `üë§–Ü–º'—è: ${me.name}\n\nüïê–í—ñ–∫: ${me.age}\n\nüíÅ–Ü–Ω—Ñ–∞: ${me.text}`;
  if (me.type === "photo") {
    await ctx.replyWithPhoto(
      {
        url: me.photo_url,
      },
      {
        caption: message,
        reply_markup: {
          keyboard: [
            [{ text: "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
            [{ text: "üåü Premium" }, { text: "üíå –ú–æ—ó –≤–ø–æ–¥–æ–±–∞–π–∫–∏" }],
            [{ text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
          ],
          resize_keyboard: true,
        },
      }
    );
  } else {
    await ctx.replyWithVideo(
      {
        url: me.photo_url,
      },
      {
        caption: message,
        reply_markup: {
          keyboard: [
            [{ text: "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
            [{ text: "üåü Premium" }, { text: "üíå –ú–æ—ó –≤–ø–æ–¥–æ–±–∞–π–∫–∏" }],
            [{ text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
          ],
          resize_keyboard: true,
        },
      }
    );
  }
});

bot.hears("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", async (ctx) => {
  await ctx.reply("üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç", {
    reply_markup: {
      keyboard: [
        [{ text: "üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" }, { text: "üëÄ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏" }],
        [
          { text: "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" },
          { text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" },
        ],
      ],
      resize_keyboard: true,
    },
  });
});
bot.hears("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏", async (ctx) => {
  const message = `üë• –ú–æ—ó –†–µ—Ñ–µ—Ä–∞–ª–∏ - –£ –†–æ–∑—Ä–æ–±—Ü—ñ

  –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É "–ú–æ—ó –†–µ—Ñ–µ—Ä–∞–ª–∏", —è–∫–∏–π –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º –±–∞—á–∏—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è–º. –ó —Ü–∏–º —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∏–º —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –≤–∏ –∑–º–æ–∂–µ—Ç–µ:
  
  üìä –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –î–∏–Ω–∞–º—ñ–∫—É: –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∞—à–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏.
  
  üåê –†–æ–∑—à–∏—Ä—é–π—Ç–µ –ú–µ—Ä–µ–∂—É: –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –±–æ–Ω—É—Å–∏ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞.
  
  üéâ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ü–µ—Ä–µ–≤–∞–≥–∏: –û—Ç—Ä–∏–º—É–π—Ç–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –ø—Ä–∏–≤—ñ–ª–µ—ó —Ç–∞ –±–æ–Ω—É—Å–∏ –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–µ–≤–Ω–∏—Ö –º–∏–ª—å–Ω–∏–∫—ñ–≤.
  
  –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—è –∑ –Ω–∞–º–∏, —ñ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –≤–∏ –∑–º–æ–∂–µ—Ç–µ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è —É—Å—ñ–º–∞ –ø–µ—Ä–µ–≤–∞–≥–∞–º–∏ "–ú–æ—ó—Ö –†–µ—Ñ–µ—Ä–∞–ª—ñ–≤"! üë•‚ú®`;
  await ctx.reply(message, {
    reply_markup: {
      keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }]],
      resize_keyboard: true,
    },
  });
});
bot.hears("‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", async (ctx) => {
  await ctx.reply("‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", {
    reply_markup: {
      keyboard: [
        [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è" }],
        [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫" }],
        [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ —Å–µ–±–µ" }],
        [{ text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
      ],
      resize_keyboard: true,
    },
  });
});

bot.hears("üåü Premium", async (ctx) => {
  const message = `
  üåü Premium Access

–û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —Ç–∞ –ø–µ—Ä–µ–≤–∞–≥ –∑ –Ω–∞—à–∏–º –ø—Ä–µ–º—ñ—É–º –ø–ª–∞–Ω–æ–º! –ù–∞—à—ñ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç–Ω–∏–∫–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å:

üöÄ –†–∞–Ω–Ω—ñ–π –î–æ—Å—Ç—É–ø: –ë—É–¥—å—Ç–µ —Å–µ—Ä–µ–¥ –ø–µ—Ä—à–∏—Ö, —Ö—Ç–æ –≤–∏–ø—Ä–æ–±–æ–≤—É—î –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.

üé® –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –¢–µ–º–∏: –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Ç–∞ –¥–∏–∑–∞–π–Ω, –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—à–µ –¥–ª—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –ø—Ä–µ–º—ñ—É–º-–ø–ª–∞–Ω—É.

ü§ñ –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ö–æ–º–∞–Ω–¥–∏ –ë–æ—Ç–∞: –ù–æ–≤—ñ —Ç–∞ –ø–æ—Ç—É–∂–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–∏—Ö –±–æ—Ç—ñ–≤.

üìö –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –í—ñ–¥–∂–µ—Ç–∏: –î–æ–¥–∞–π—Ç–µ —Å—Ç–∏–ª—å –¥–æ —Å–≤–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤ –¥–ª—è –ø—Ä–µ–º—ñ—É–º-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

üí¨ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: –®–≤–∏–¥–∫–∞ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤—ñ–¥ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∞—Å.

–û–±–∏—Ä–∞–π—Ç–µ –Ω–∞—à –ø—Ä–µ–º—ñ—É–º –ø–ª–∞–Ω —Ç–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤—É–π—Ç–µ –Ω–∞–π–∫—Ä–∞—â—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ! üåü
  `;
  await ctx.reply(message, {
    reply_markup: {
      keyboard: [[{ text: "–ö—É–ø–∏—Ç–∏ üåü Premium " }], [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }]],
      resize_keyboard: true,
    },
  });
});

bot.hears("üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç", async (ctx) => {
  const myAcc = await pool.query(`
  SELECT a.*, b.photo_url,b.type
  FROM users_info AS a
  LEFT JOIN users_photos AS b ON a.user_id = b.user_id
  WHERE a.user_id = ${ctx.message.from.id};
  `);
  const me = myAcc.rows[0];
  console.log(me);
  const message = `üë§–Ü–º'—è: ${me.name}\n\nüïê–í—ñ–∫: ${me.age}\n\nüíÅ–Ü–Ω—Ñ–∞: ${me.text}`;
  if (me.type === "photo") {
    await ctx.replyWithPhoto(
      {
        url: me.photo_url,
      },
      {
        caption: message,
        reply_markup: {
          keyboard: [
            [{ text: "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
            [{ text: "üåü Premium" }, { text: "üíå –ú–æ—ó –≤–ø–æ–¥–æ–±–∞–π–∫–∏" }],
            [{ text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
          ],
          resize_keyboard: true,
        },
      }
    );
  } else {
    await ctx.replyWithVideo(
      {
        url: me.photo_url,
      },
      {
        caption: message,
        reply_markup: {
          keyboard: [
            [{ text: "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
            [{ text: "üåü Premium" }, { text: "üíå –ú–æ—ó –≤–ø–æ–¥–æ–±–∞–π–∫–∏" }],
            [{ text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
          ],
          resize_keyboard: true,
        },
      }
    );
  }
});
bot.hears(`üê£ –ó–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º`,async ctx =>{
  ctx.reply('@web_developer_Ukraine')
})
bot.launch();
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});
module.exports = {
  bot,
};
