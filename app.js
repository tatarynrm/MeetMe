require("dotenv").config();
const { Telegraf, Scenes, session, Markup } = require("telegraf");
const bot = new Telegraf(process.env.BOT_TOKEN);
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const http = require("http");
const app = express();
const liqpayRouter = require("./routes/liqpay/liqpay");
const port = 5005;

var LiqPay = require("./my_modules/liqpay/liqpay");
const { v4: uuidv4 } = require("uuid");
const pool = require("./db/pool");
const geolib = require("geolib");
const iconv = require("iconv-lite");
const { createUser } = require("./controllers/users");

const registrationScene = require("./scenes/registerScene");
const likesScene = require("./scenes/likesScene");
const public_key = "sandbox_i31110430124";
const private_key = "sandbox_HJjraXMdCLnz3ApcEJOYCjmSgRjhsjtuvFSVmVci";
var liqpay = new LiqPay(public_key, private_key);

// stage.register(registrationScene);
app.use(bodyParser.json({ limit: "30mb", extended: true }));
app.use(bodyParser.urlencoded({ limit: "30mb", extended: true }));
app.use(express.json());
app.use("/img", express.static("img"));
app.use("/downloads", express.static("downloads"));
app.use(
  cors({
    origin: "*",
    methods: ["POST", "GET"],
  })
);
app.use("/liqpay", liqpayRouter);

const stage = new Scenes.Stage([registrationScene, likesScene]);

bot.use(session());
bot.use(stage.middleware());
bot.use((ctx, next) => {
  ctx.session.myIndex = 0;
  return next();
});
global.currentProfileIndex = 0;
const getInvoice = async (amount, username, customer) => {
  try {
    const invoice = await liqpay.api(
      "request",
      {
        action: "invoice_send",
        version: "3",
        email: "tatarynrm@gmail.com",
        amount: amount,
        currency: "UAH",
        order_id: uuidv4(),
        description: `–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –±–æ—Ç–∞ –ß–∏—Å—Ç–æ–∫—Ä–æ–≤–Ω–π —É–∫—Ä–∞—ó–Ω–µ—Ü—å ${
          username ? username : null
        }`,
        server_url: "https://api.noris.tech/liqpay/callback",
        customer: customer,
        info: "–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏ Telegram Bot",
      },
      function (json) {
        console.log(json.result);
      }
    );
    return invoice;
  } catch (error) {
    console.log(error);
  }
};
const users = {};
bot.start(async (ctx) => {
  createUser(ctx.message.from);

  const userInfo = await pool.query(
    `select * from users_info where user_id = ${ctx.message.from.id}`
  );
  console.log(userInfo);
  if (userInfo.rows <= 0) {
    ctx.replyWithHTML(
      `–í—ñ—Ç–∞—é –≤ –±–æ—Ç—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤ MeetMe.\n–ü–µ—Ä—à–∏–π –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ç –∑–Ω–∞–π–æ–º—Å—Ç–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ!`,
      {
        reply_markup: {
          keyboard: [
            [{ text: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É üìí" }],
            [{ text: "–ù–∞—à–µ Comunity üë®‚Äçüë®‚Äçüëß‚Äçüëß" }],
          ],
          resize_keyboard: true,
        },
      }
    );
  } else {
    ctx.replyWithHTML(
      `–í—ñ—Ç–∞—é –≤ –±–æ—Ç—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤ MeetMe.\n–ü–µ—Ä—à–∏–π –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ç –∑–Ω–∞–π–æ–º—Å—Ç–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ!`,
      {
        reply_markup: {
          keyboard: [
            [{ text: "–ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" }],
            [{ text: "–î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏ üëÄ" }],
            // [{ text: "–ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç" }],
            // [{ text: "–ü—Ä–µ–º—ñ—É–º 1 —Ç–∏–∂–¥–µ–Ω—å" }],
            [{ text: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
            [{ text: "–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" }],
          ],
          resize_keyboard: true,
        },
      }
    );
  }
  const userId = ctx.from.id;
  const referrerId = ctx.message.text.split(" ")[1];
  console.log(users);
  if (referrerId) {
    users[userId] = { referrer: referrerId };
    await ctx.reply(
      `–í–∞—Å –∑–∞–ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ${referrerId}\n\n–í–∞–º –Ω–∞–¥–∞–Ω–æ 2 –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö ‚ù§Ô∏è`
    );
    const existReferalUsers = await pool.query(
      `select * from referals where user_id = ${userId} and referer_id =${referrerId}`
    );
    if (existReferalUsers.rows > 0) {
      console.log("exist");
    }
    if (existReferalUsers.rows <= 0) {
      const res = await pool.query(`insert into referals (user_id,referer_id) 
    values(${userId},${referrerId})
   `);
      // ctx.sendMessage(referrerId,`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} —â–æ–π–Ω–æ –≤–∞–º –Ω–∞–¥–∞–≤ 2 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –ª–∞–π–∫–∏.–ö–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!)`)
      bot.telegram.sendMessage(
        referrerId,
        `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} —â–æ–π–Ω–æ –≤–∞–º –Ω–∞–¥–∞–≤ 5 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö ‚ù§Ô∏è.–ö–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!)`
      );
    }
  } else {
    users[userId] = { referrer: null };
    // ctx.reply("Welcome! You have not been referred by anyone.");
  }
  // if (userInfo.rows >= 0) {
  //   ctx.replyWithHTML(`–í—ñ—Ç–∞—é –≤ –±–æ—Ç—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤ MeetMe.\n–ü–µ—Ä—à–∏–π –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ç –∑–Ω–∞–π–æ–º—Å—Ç–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ!`, {
  //     reply_markup: {
  //       keyboard: [
  //         [{ text: "–ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" }],
  //         [{ text: "–ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç" }],
  //         [{ text: "–ü—Ä–µ–º—ñ—É–º 1 —Ç–∏–∂–¥–µ–Ω—å" }],
  //         [{ text: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
  //       ],
  //       resize_keyboard: true,
  //     },
  //   });
  // }
});

bot.hears("–ü—Ä–µ–º—ñ—É–º 1 —Ç–∏–∂–¥–µ–Ω—å", async (ctx) => {
  const res = await getInvoice(
    75,
    ctx.message.from.username,
    ctx.message.from.id
  );
  console.log(res);
  ctx.reply("–î–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ü—Ä–µ–º—ñ—É–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 1 —Ç–∏–∂–¥–µ–Ω—å", url: res.href }],
      ],
      resize_keyboard: true,
    },
  });
});

bot.hears("distance", (ctx) => {
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ö–∏—ó–≤)
  const pointA = { latitude: 50.4501, longitude: 30.5234 };

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ—ó —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –õ—å–≤—ñ–≤)
  const pointB = { latitude: 49.8383, longitude: 24.0232 };

  // –û–±—á–∏—Å–ª–∏—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const distance = geolib.getDistance(pointA, pointB);
  ctx.reply(
    `–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ç–æ—á–∫–æ—é A —ñ —Ç–æ—á–∫–æ—é B: ${geolib
      .convertDistance(distance, "km")
      .toFixed(1)}–∫–º`
  );
});
let profiles = [];
let currentProfileIndex = 0;
bot.command("dev", (ctx) => ctx.scene.enter("registrationScene"));
bot.hears("–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É", async (ctx) => {
  ctx.scene.enter("registrationScene");
});
bot.hears("–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É üìí", async (ctx) => {
  ctx.scene.enter("registrationScene");
});
// bot.hears("–î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏ üëÄ", async (ctx,next) => {
//   ctx.scene.enter("likesScene");
//   ctx.session.index = 0;
//   return next()
//   // const index = 0
//   // ctx.reply('dsadsa',{})
// });

// let profiles = [
//   { name: "Profile 1", age: 25 },
//   { name: "Profile 2", age: 30 },
//   { name: "Profile 3", age: 28 },
//   // –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –∞–Ω–∫–µ—Ç–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
// ];

bot.hears("–î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏ üëÄ", async (ctx) => {
  const profiles1 = await pool.query(`
 SELECT a.*, b.photo_url
 FROM users_info AS a
 LEFT JOIN users_photos AS b
 ON a.user_id = b.user_id;`);
  console.log(profiles1.rows);
  const usersProfile = profiles1.rows;
  if (usersProfile.length > 0) {
    profiles.push(...usersProfile);
  }

  if (currentProfileIndex < profiles.length) {
    sendProfile(ctx);
  } else {
    ctx.reply("No more profiles available.");
  }
});
async function sendProfile(ctx) {
  const currentProfile = profiles[currentProfileIndex];
  const message = `Name: ${currentProfile.name}\nAge: ${currentProfile.age}`;
  // const message = `Na323`;
  // const replyMarkup = Markup.inlineKeyboard([
  //   Markup.button.callback("Like", "like"),
  //   Markup.button.callback("Dislike", "dislike"),
  // ]);
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback("Option 1", "option1"),
    Markup.button.callback("Option 2", "option2"),
  ]);
  const photoUrl =
    "https://static-ssl.businessinsider.com/image/5cc86f31768b3e05177244e3-2400/shutterstock1093218185.jp2";
  await ctx.replyWithPhoto(
    {
      url: currentProfile.photo_url,
    },
    {
      caption: message,
      reply_markup: {
        keyboard: [[{ text: "‚ù§Ô∏è" },{text:"üëé"}]],
        resize_keyboard: true,
      },
    }
  );

  // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ currentProfileIndex –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏
  currentProfileIndex++;
}

bot.hears("‚ù§Ô∏è", async (ctx) => {
  // –û–Ω–æ–≤—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏ —è–∫ –ª–∞–π–∫
  const currentProfile = profiles[currentProfileIndex - 1];

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏
  if (currentProfileIndex < profiles.length) {
    sendProfile(ctx);
  } else {
    ctx.reply("–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É");
  }
});

bot.hears("üëé", async (ctx) => {
  // –û–Ω–æ–≤—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏ —è–∫ –¥–∏–∑–ª–∞–π–∫
  const currentProfile = profiles[currentProfileIndex - 1];
  await ctx.reply(`You disliked ${currentProfile.name}'s profile.`);

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏
  if (currentProfileIndex < profiles.length) {
    sendProfile(ctx);
  } else {
    ctx.reply("No more profiles available.");
  }
});

bot.launch();
// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});

module.exports = {
  bot,
};
