const { Telegraf, Scenes, session } = require("telegraf");
const { enter, leave } = Scenes.Stage;
const pool = require("../db/pool");
const https = require("https");
const fs = require("fs");
const axios = require("axios");
const path = require("path");

const savePath = "../downloads/";
const userData = {};
const folderName = "img"; // –ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏
const allPhoto = [];
const fullPath = path.join(__dirname, folderName); // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É

// console.log("–®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏:", fullPath);
const rootPath = process.cwd();

const changeNameScene = new Scenes.WizardScene(
  "changeNameScene",
  async (ctx) => {
    const result = await pool.query(
      `select * from users_info where user_id = ${ctx.message.from.id}`
    );
    await ctx.reply(`–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:`, {
      reply_markup: {
        keyboard: [[{ text: result.rows[0].name }]],
        resize_keyboard: true,
      },
    });
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
    return ctx.wizard.next();
  },
  async (ctx) => {
    const name = ctx.message.text;
    const id = ctx.message.from.id
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
    if (typeof name === "string") {
      userData.name = name;
      // Update query
      console.log(ctx.message);
      const updateQuery = "UPDATE users_info SET name = $1 WHERE user_id = $2";
      const values = [name, id]; // Adjust the values as needed

      // Execute the update query
      pool.query(updateQuery, values, (err, result) => {
        if (err) {
          console.error("Error executing query", err);
        } else {
          console.log("Update successful:", result.rowCount,result.rows[0], "rows updated");
        }
      });
      await ctx.reply(`–Ü–º'—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${name}`, {
        reply_markup: {
          keyboard: [
            [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è" }],
            [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫" }],
            [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ —Å–µ–±–µ" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
          ],
          resize_keyboard: true,
        },
      });
    } else {
      await ctx.reply("–õ–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç");
      return;
    }
    return ctx.scene.leave();
  }
);

module.exports = changeNameScene;
