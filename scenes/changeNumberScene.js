const { Telegraf, Scenes, session, Markup } = require("telegraf");
const { enter, leave } = Scenes.Stage;
const pool = require("../db/pool");
const https = require("https");
const fs = require("fs");
const axios = require("axios");
const path = require("path");

const savePath = "../downloads/";
const userData = {};
const folderName = "img"; // –ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏
const allPhoto = [];
const fullPath = path.join(__dirname, folderName); // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É

// console.log("–®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏:", fullPath);
const rootPath = process.cwd();

const changeNumberScene = new Scenes.WizardScene(
  "changeNumberScene",
  async (ctx) => {
    const result = await pool.query(
      `select number from users_info where user_id = ${ctx.message.from.id}`
    );
   await ctx.reply(`–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:\n\n–¶—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ü—ñ–ª–∫–æ–º —Ç–∞—î–º–Ω–∞, —Ç–∞ –Ω–µ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—å —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º.\n\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω, –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–≤'—è–∑–∞—Ç–∏—Å—å –∑ –≤–∞–º–∏ –≤ —Ä–∞–∑—ñ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à–µ–π –∞–±–æ –∫–æ–Ω–∫—É—Ä—Å—ñ–≤. ` , Markup.inlineKeyboard([
        Markup.contactRequestButton('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'),
      ]));
    if (ctx.message.text === "/myprofile") {
      return ctx.scene.leave();
    }
    return ctx.wizard.next();
  },
  async (ctx) => {
    const number = ctx.message.text
    const phoneRegex = /^\+\d{12}$/;
  
    const isValidPhoneNumber = (phoneNumber) => {
        return phoneRegex.test(phoneNumber);
      };
    if (isValidPhoneNumber(number)) {
        await ctx.reply('–ù–æ–º–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π')
    }
   
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
if (result.rows > 0) {
    
    const updateQuery = "UPDATE users_info SET age = $1 WHERE user_id = $2";
    const values = [age, id]; // Adjust the values as needed

    // Execute the update query
    pool.query(updateQuery, values, (err, result) => {
      if (err) {
        console.error("Error executing query", err);
      } else {
        console.log("Update successful:", result.rowCount,result.rows[0], "rows updated");
      }
    });
    await ctx.reply(`–ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ ${number}`, {
      reply_markup: {
        keyboard: [
          [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è" }],
          [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫" }],
          [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ —Å–µ–±–µ" }],
          [{ text: "üî∏–ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
        ],
        resize_keyboard: true,
      },
    });
}else {
    await ctx.reply('–ï–µ–µ–µ–µ....–∞ –Ω–æ–º–µ—Ä ?)')
}
 
  


    return ctx.scene.leave();
  }
);

module.exports = changeNumberScene;
