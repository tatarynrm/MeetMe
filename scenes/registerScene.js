const { Telegraf, Scenes, session } = require("telegraf");
const pool = require("../db/pool");
const https = require("https");
const fs = require("fs");
const axios = require("axios");
const path = require("path");
const downloadAndSaveFile = require("../helpers/savePhotos");
const savePath = "../downloads/";
const { enter, leave } = Scenes.Stage;
const userData = {};
const folderName = "img"; // –ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏
const fullPath = path.join(__dirname, folderName); // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É

console.log("–®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏:", fullPath);
const rootPath = process.cwd();

const registrationScene = new Scenes.WizardScene(
  "registrationScene",
  (ctx) => {
    console.log(fullPath);
    ctx.reply(`–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:`, {
      reply_markup: { remove_keyboard: true },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const name = ctx.message.text;
    userData.name = name;
    ctx.reply(`–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–∫:`);
    return ctx.wizard.next();
  },

  async (ctx) => {
    const age = parseInt(ctx.message.text);
    if (isNaN(age)) {
      await ctx.reply("–¢—É—Ç –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏!)");
      return;
    }
    if (age < 16) {
      await ctx.reply("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ª–∏—à–µ –∑ 16 —Ä–æ–∫—ñ–≤!(((");
      return;
    }
    if (age > 50) {
      await ctx.reply("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ –±–æ—Ç—ñ –ª–∏—à–µ –¥–æ 49 —Ä–æ–∫—ñ–≤ )");
      return;
    }
    userData.age = age;
    ctx.reply("–•—Ç–æ –≤–∏ ?", {
      reply_markup: {
        keyboard: [[{ text: "–Ø —Ö–ª–æ–ø–µ—Ü—å" }, { text: "–Ø –¥—ñ–≤—á–∏–Ω–∞" }]],
        resize_keyboard: true,
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const sex = ctx.message.text;
    if (sex === "–Ø —Ö–ª–æ–ø–µ—Ü—å") {
      userData.sex = "M";
    }
    if (sex === "–Ø –¥—ñ–≤—á–∏–Ω–∞") {
      userData.sex = "W";
    }
    ctx.reply(`–ö–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ?`, {
      reply_markup: {
        keyboard: [
          [{ text: "–•–ª–æ–ø—Ü—è" }, { text: "–î—ñ–≤—á–∏–Ω—É" }, { text: "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ" }],
        ],
        resize_keyboard: true,
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const looking = ctx.message.text;
    if (looking === "–•–ª–æ–ø—Ü—è") {
      userData.looking = "M";
    }
    if (looking === "–î—ñ–≤—á–∏–Ω—É") {
      userData.looking = "W";
    }
    if (looking === "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ") {
      userData.looking = "ALL";
    }
    ctx.reply(`–û–ø–∏—à—ñ—Ç—å —Å–µ–±–µ!`, { reply_markup: { remove_keyboard: true } });
    return ctx.wizard.next();
  },
  (ctx) => {
    const bio = ctx.message.text;
    userData.bio = bio;
    ctx.reply(
      "–í–∞–Ω–¥–µ—Ä—Ñ—É–ª! –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ —É —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é ü§ó, —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–±—É—Ç–∏ —ñ–Ω–∫–æ–≥–Ω—ñ—Ç–æ ü•∂...",
      {
        reply_markup: {
          keyboard: [[{ text: "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é ü§ó" }]],
          resize_keyboard: true,
        },
      }
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (ctx.message.photo) {
      // Handle the uploaded photo (store or process it as needed)
      if (!userData.photos) {
        userData.photos = [];
      }

      if (userData.photos.length < 1) {
        const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        const my = ctx.message.photo;
        console.log(my);
        //   userData.photos.push(photo);
        //  await ctx.reply(`–§–æ—Ç–æ ${userData.photos.length} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.`);
        const folderName = `${ctx.message.from.id}`; // –ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏
        const folderPath = path.join(rootPath, "img", folderName); // –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
        if (!fs.existsSync(folderPath)) {
          // –Ø–∫—â–æ –ø–∞–ø–∫–∏ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ó—ó
          fs.mkdirSync(folderPath);
          console.log(`–ü–∞–ø–∫—É '${folderName}' —Å—Ç–≤–æ—Ä–µ–Ω–æ.`);
        } else {
          console.log(`–ü–∞–ø–∫–∞ '${folderName}' –≤–∂–µ —ñ—Å–Ω—É—î.`);
        }
        let imageId = ctx.message.photo.pop().file_id;

        ctx.telegram.getFileLink(imageId).then((link) => {
          https.get(link, (response) => {
            console.log("IDXXXXXXXXXXXX", imageId);
            const filePath = path.join(
              folderPath,
              `${ctx.message.from.id}.jpeg`
            );
            console.log("FILEPATH!!!!!!!!!!!", filePath);
            const fileStream = fs.createWriteStream(filePath);
            response.pipe(fileStream);
          });
        });

        await ctx.reply("–°—É–ø–µ—Ä!");
        console.log(userData);
      } else {
        ctx.reply("–í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ (1).");
      }
    } else if (ctx.message.text === "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é ü§ó") {
      // You can save the registration data and photos to your database or storage here.
      // For demonstration purposes, we're just showing the collected data.
      const registrationData = {
        name: userData.name,
        age: userData.age,
        sex: userData.sex,
        looking: userData.looking,
        bio: userData.bio,
        photos: userData.photos || [],
        id: ctx.message.from.id,
      };
      const existUserInfo = await pool.query(
        `select * from users_info where user_id = ${registrationData.id}`
      );
      console.log("EXISTING USERS_INFO", existUserInfo);
      if (existUserInfo.rows <= 0) {
        const res1 =
          await pool.query(`insert into users_info (name,age,text,user_id)
  values('${registrationData.name}',${registrationData.age},'${registrationData.bio}',${registrationData.id})
  `);
        console.log(res1);
      } else {
        const updateQuery =
          "UPDATE users_info SET name = $1, age = $2, text = $3 WHERE user_id = $4";

        const res = pool.query(
          updateQuery,
          [
            registrationData.name,
            registrationData.age,
            registrationData.bio,
            registrationData.id,
          ],
          (err, result) => {
            if (err) {
              console.error("Error executing the query", err);
            } else {
              console.log("Data updated successfully");
            }
          }
        );
        console.log("-eqw-eqwjkeqwkjeqwk", res);
      }

      // Perform database or storage operations here
      console.log("Registration Data:", registrationData);
      const existPhoto = await pool.query(
        `select * from users_photos where user_id = ${ctx.message.from.id}`
      );
      console.log(existPhoto.rows);
      if (existPhoto.rows <= 0) {
        await pool.query(
          `insert into users_photos (user_id,photo_url) values(${
            ctx.message.from.id
          },'${`https://api.noris.tech/img/${ctx.message.from.id}/${ctx.message.from.id}.jpeg`}') `
        );
      }
      // Clear user data
      delete userData;

      ctx.reply(
        "–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—à—É–∫—É –∞–Ω–∫–µ—Ç.",
        {
          reply_markup: {
            keyboard: [
              [
                { text: "–ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" },
                { text: "–î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏" },
                { text: "–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" },
              ],
            ],
            resize_keyboard: true,
          },
        }
      );
      ctx.scene.leave();
    } else {
      ctx.reply(
        // "You can send up to three photos or type /done when you are ready to complete the registration."
        "–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º 1 —Ñ–æ—Ç–æ (–Ω–µ –≤—ñ–¥–µ–æ —ñ –Ω–µ –≥—ñ—Ñ) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é"
      );
    }
  }
);

module.exports = registrationScene;
