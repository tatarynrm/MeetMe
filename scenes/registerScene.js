const { Telegraf, Scenes, session, Markup } = require("telegraf");
const pool = require("../db/pool");
const https = require("https");
const fs = require("fs");
const axios = require("axios");
const path = require("path");
const downloadAndSaveFile = require("../helpers/savePhotos");
const saveLocation = require("../helpers/saveLocation");
const reverseGeocode = require("../helpers/reverseGeocode");

const savePath = "../downloads/";
const { enter, leave } = Scenes.Stage;
const userData = {};
const folderName = "img"; // –ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏
const allPhoto = [];
const fullPath = path.join(__dirname, folderName); // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É

// console.log("–®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏:", fullPath);
const rootPath = process.cwd();

const registrationScene = new Scenes.WizardScene(
  "registrationScene",
  (ctx) => {
    ctx.reply(`–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:`, {
      reply_markup: { remove_keyboard: true },
    });
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
    return ctx.wizard.next();
  },
  async (ctx) => {
    const name = ctx.message.text;
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
    if (typeof name === "string") {
      userData.name = name;
      ctx.reply(`–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–∫:`);
    } else {
      await ctx.reply("–õ–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç");
      return;
    }

    return ctx.wizard.next();
  },

  async (ctx) => {
    const age = parseInt(ctx.message.text);
    if (isNaN(age)) {
      await ctx.reply("–¢—É—Ç –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏!)");
      return;
    }
    if (age < 16) {
      await ctx.reply("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ª–∏—à–µ –∑ 16 —Ä–æ–∫—ñ–≤!(((");
      return;
    }
    if (age > 50) {
      await ctx.reply("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ –±–æ—Ç—ñ –ª–∏—à–µ –¥–æ 49 —Ä–æ–∫—ñ–≤ )");
      return;
    }
    if (typeof age !== "number") {
      await ctx.reply("–õ–∏—à–µ —Ü–∏—Ñ—Ä–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç—É!");
      return;
    }
    if (typeof age === "string") {
      await ctx.reply("–õ–∏—à–µ —Ü–∏—Ñ—Ä–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç—É!");
      return;
    }
    userData.age = age;
    ctx.reply("–•—Ç–æ –≤–∏ ?", {
      reply_markup: {
        keyboard: [[{ text: "–Ø —Ö–ª–æ–ø–µ—Ü—å" }, { text: "–Ø –¥—ñ–≤—á–∏–Ω–∞" }]],
        resize_keyboard: true,
      },
    });
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
    return ctx.wizard.next();
  },
  async (ctx) => {
    const sex = ctx.message.text;
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
    if (sex === "–Ø —Ö–ª–æ–ø–µ—Ü—å") {
      userData.sex = "M";
    } else if (sex === "–Ø –¥—ñ–≤—á–∏–Ω–∞") {
      userData.sex = "W";
    } else {
      await ctx.reply("–ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)");
      return;
    }

    await ctx.reply(`–ö–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ?`, {
      reply_markup: {
        keyboard: [
          [{ text: "–•–ª–æ–ø—Ü—è" }, { text: "–î—ñ–≤—á–∏–Ω—É" }, { text: "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ" }],
        ],
        resize_keyboard: true,
      },
    });
    return ctx.wizard.next();
  },
  async (ctx) => {
    const looking = ctx.message.text;
    console.log(looking);
    if (looking === "–•–ª–æ–ø—Ü—è") {
      userData.looking = "M";
    } else if (looking === "–î—ñ–≤—á–∏–Ω—É") {
      userData.looking = "W";
    } else if (looking === "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ") {
      userData.looking = "ALL";
    } else {
      await ctx.reply("–ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)");
      return;
    }
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
    const requestLocationButton = Markup.button.locationRequest(
      "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é üìç"
    );
  
    // Creating a keyboard with the location button
    const keyboard = Markup.keyboard([requestLocationButton]).resize();
    ctx.reply(`–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é üìç`,keyboard);
    return ctx.wizard.next();
  },
  async (ctx) => {
    const lattitude = ctx.message.location.latitude;
    const longitude = ctx.message.location.longitude;
   const address = await reverseGeocode(lattitude,longitude);
    saveLocation(ctx)
    const userLocation = address.address_components;
    const cityFind = userLocation.filter((item) => {
      return item.types.includes("locality") & item.types.includes("political");
    });
    const city = cityFind[0].long_name;
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
  await  ctx.reply(`–ß—É–¥–æ–≤–æ.–í–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è ${city}`)
   await ctx.reply(`–¢–µ–ø–µ—Ä , —Ä–æ–∑–∫–∞–∂—ñ—Ç—å –¥–µ–∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ —Å–µ–±–µ!`, { reply_markup: { remove_keyboard: true } });
    return ctx.wizard.next();
  },
  async (ctx) => {
    const bio = ctx.message.text;
    if (ctx.message.text === "/start") {
      return ctx.scene.leave();
    }
    if (typeof bio === "string") {
      userData.bio = bio;
      ctx.reply(
        "–í–∞–Ω–¥–µ—Ä—Ñ—É–ª! –ó–∞–ª–∏—à–∏–≤—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫.–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –º–∞–∫—Å–∏–º—É–º 1 —Ñ–æ—Ç–æ —É —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å / –∞–±–æ 1 –≤—ñ–¥–µ–æ ü§ó"
      );
    } else {
      await ctx.reply("–õ–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç");
      return;
    }

    return ctx.wizard.next();
  },
  async (ctx) => {
    if (ctx.message.photo) {
      const photo = ctx.message.photo;
      if (!userData.photos) {
        userData.photos = [];
      }

      if (userData.photos.length < 1) {
        const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        const my = ctx.message.photo;
        const folderName = `${ctx.message.from.id}`; // –ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏
        const folderPath = path.join(rootPath, "img", folderName); // –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
        if (fs.existsSync(folderPath)) {
          fs.rmdirSync(folderPath, { recursive: true });
        }
        fs.mkdirSync(folderPath);
        let imageId = ctx.message.photo.pop().file_id;
        ctx.telegram.getFileLink(imageId).then((link) => {
          https.get(link, (response) => {
            const filePath = path.join(
              folderPath,
              `${ctx.message.from.id}.jpeg`
            );
            const fileStream = fs.createWriteStream(filePath);
            response.pipe(fileStream);
          });
        });
        await ctx.reply("–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
        userData.photo = `${process.env.API_LINK}/img/${ctx.message.from.id}/${ctx.message.from.id}.jpeg`;
        userData.file = "photo";
        const registrationData = {
          name: userData.name,
          age: userData.age,
          sex: userData.sex,
          looking: userData.looking,
          bio: userData.bio,
          photos: userData.photos || [],
          id: ctx.message.from.id,
        };
        console.log("REGISTER DATAAAAAAAAAAAAAAAAAAAAAAAAAA",registrationData);
        const existUserInfo = await pool.query(
          `select * from users_info where user_id = ${registrationData.id}`
        );
        console.log("EXISTING USERS_INFO", existUserInfo);
        if (existUserInfo.rows <= 0) {
          const res1 =
            await pool.query(`insert into users_info (name,age,text,user_id,sex,looking)
    values('${registrationData.name}',${registrationData.age},'${registrationData.bio}',${registrationData.id},'${registrationData.sex}','${registrationData.looking}')
    `);
        } else {
          const updateQuery =
            "UPDATE users_info SET name = $1, age = $2, text = $3,sex=$4,looking=$5 WHERE user_id = $6";

          const res = pool.query(
            updateQuery,
            [
              registrationData.name,
              registrationData.age,
              registrationData.bio,
              registrationData.sex,
              registrationData.looking,
              registrationData.id,
            ],
            (err, result) => {
              if (err) {
                console.error("Error executing the query", err);
              } else {
                console.log("Data updated successfully");
              }
            }
          );
        }

        const existPhoto = await pool.query(
          `select * from users_photos where user_id = ${ctx.message.from.id}`
        );
        if (existPhoto.rows <= 0) {
          await pool.query(
            `insert into users_photos (user_id,photo_url,type) values(${
              ctx.message.from.id
            },'${`${process.env.API_LINK}/img/${ctx.message.from.id}/${ctx.message.from.id}.jpeg`}','photo') `
          );
        } else {
          const res = await pool.query(
            `UPDATE users_photos SET photo_url = $1, type = 'photo' WHERE user_id = $2`,
            [
              `${process.env.API_LINK}/img/${ctx.message.from.id}/${ctx.message.from.id}.jpeg`,
              ctx.message.from.id,
            ]
          );
        }
        await ctx.reply(
          "–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—à—É–∫—É –∞–Ω–∫–µ—Ç.",
          {
            reply_markup: {
              keyboard: [
                [{ text: "üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" }, { text: "üëÄ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏" }],
                [
                  { text: "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" },
                  { text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" },
                ],
                [{ text: "üê£ –ó–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º" }],
                [{ text: "üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç" }],
              ],
              resize_keyboard: true,
            },
          }
        );
        ctx.scene.leave();
      } else {
        ctx.reply("–í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ (1).");
      }
    } else if (ctx.message.video) {
      if (ctx.message.video.duration > 15) {
        await ctx.reply(
          "–í—ñ–¥–µ–æ –¥–æ–≤—à–µ –Ω—ñ–∂ 15 —Å–µ–∫—É–Ω–¥.–ù–∞–∂–∞–ª—å Telegram –Ω–µ –º–æ–∂–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –¥–∞–Ω–µ –≤—ñ–¥–µ–æ.–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥)"
        );
        return;
      } else {
        const videoId = ctx.message.video.file_id;
        const folderName = `${ctx.message.from.id}`; // –ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏
        const folderPath = path.join(rootPath, "img", folderName); // –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
        if (fs.existsSync(folderPath)) {
          fs.rmdirSync(folderPath, { recursive: true });
        }
        fs.mkdirSync(folderPath);
        ctx.telegram.getFileLink(videoId).then((link) => {
          https.get(link, (response) => {
            const filePath = path.join(
              folderPath,
              `${ctx.message.from.id}.mp4`
            );
            console.log("FILEPATH!!!!!!!!!!!", filePath);
            const fileStream = fs.createWriteStream(filePath);
            response.pipe(fileStream);
          });
        });
        ctx.reply("–í—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");

        const registrationData = {
          name: userData.name,
          age: userData.age,
          sex: userData.sex,
          looking: userData.looking,
          bio: userData.bio,
          photos: userData.photos || [],
          id: ctx.message.from.id,
        };
        const existUserInfo = await pool.query(
          `select * from users_info where user_id = ${registrationData.id}`
        );
        console.log("EXISTING USERS_INFO", existUserInfo);
        if (existUserInfo.rows <= 0) {
          const res1 =
            await pool.query(`insert into users_info (name,age,text,user_id,sex,looking)
    values('${registrationData.name}',${registrationData.age},'${registrationData.bio}',${registrationData.id},'${registrationData.sex}','${registrationData.looking}')
    `);
        } else {
          const updateQuery =
            "UPDATE users_info SET name = $1, age = $2, text = $3,sex=$4,looking=$5 WHERE user_id = $6";
          const res = pool.query(
            updateQuery,
            [
              registrationData.name,
              registrationData.age,
              registrationData.bio,
              registrationData.sex,
              registrationData.looking,
              registrationData.id,
            ],
            (err, result) => {
              if (err) {
                console.error("Error executing the query", err);
              } else {
                console.log("Data updated successfully");
              }
            }
          );
        }

        // Perform database or storage operations here

        const existPhoto = await pool.query(
          `select * from users_photos where user_id = ${ctx.message.from.id}`
        );
        if (existPhoto.rows <= 0) {
          await pool.query(
            `insert into users_photos (user_id,photo_url,type) values(${
              ctx.message.from.id
            },'${`${process.env.API_LINK}/img/${ctx.message.from.id}/${ctx.message.from.id}.mp4`}','video') `
          );
        } else {
          const res = await pool.query(
            `UPDATE users_photos SET photo_url = $1, type = 'video' WHERE user_id = $2`,
            [
              `${process.env.API_LINK}/img/${ctx.message.from.id}/${ctx.message.from.id}.mp4`,
              ctx.message.from.id,
            ]
          );
        }
        ctx.reply(
          "–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—à—É–∫—É –∞–Ω–∫–µ—Ç.",
          {
            reply_markup: {
              keyboard: [
                [{ text: "üîë –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç" }, { text: "üëÄ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏" }],
                [
                  { text: "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" },
                  { text: "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É" },
                ],
                [{ text: "üê£ –ó–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º" }],
                [{ text: "üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç" }],
              ],
              resize_keyboard: true,
            },
          }
        );
        ctx.scene.leave();
      }
    } else {
      ctx.reply("–ö–∞–º–æ–Ω....–¥–∞–≤–∞–π —Ñ–æ—Ç–æ—á–∫—É –∞–±–æ –≤—ñ–¥–æ—Å—ñ–∫");
    }
  }
);

module.exports = registrationScene;
